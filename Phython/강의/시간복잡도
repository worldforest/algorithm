# 📒시간복잡도

   입력크기와 문제를 해결하는데 걸리는 시간과의 함수관계
    (프로그램의 연산횟수 : 연산량)
- Big O
  최악의 상황으로 연산량 계산

- Big Ω
  최선의 상황으로 연산량 계산

-Big θ
  최악과 최선의 평균으로 연산량 계산


---
* 최고차항의 차수, 차수의 계수 없이 표기
O(1)
처리할 데이터양과 상관없이 항상 일정한 연산량

O(n)
처리해야할 데이터양(n)과 비례해 연산 증가

O(n^2)
처리해야할 데이터양이 증가할 수록 데이터양 제곱만큼 연산량 증가

---
for i in range(n):
  sun = 0; ==> 연산 n번
  for j in range(n):
    sum = sum + i  ==> n^2번 실행됨 + 연산 두 번 = 2 * n * n

=  총 연산량 2n^2 + n => O(n^2)
=  최고차항만 확인하면 되기 때문에 가장 마지막에 실행되는 반복문만 확인

---
for i in range(n):
  sun = 0; ==> 연산 n번
  for j in range(i+1):
    sum = sum + i  ==> {n(n+1)}/2 + 연산 두 번 = 2 * n * n

=  총 연산량 2n^2 + n => O(n^2)
=  최고차항만 확인하면 되기 때문에 가장 마지막에 실행되는 반복문만 확인
